// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  RAZORPAY
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  fullName    String
  phone       String
  houseNumber String
  street      String
  area        String
  city        String
  state       String
  pinCode      String
  livelocation String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cartItems   Cart[]
 orders       Order[]
 payments     Payment[]

  @@map("users")
}
model ContactForm {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  phone     String?
  service   String?

  createdAt DateTime @default(now())

  @@map("contact_forms")
}



model Visitor {
  id        String   @id @default(cuid())
  ipAddress String?
  userAgent String?
  page      String?
  referer   String?
  count String?
  date      DateTime @default(now())
  createdAt DateTime @default(now())

  @@map("visitors")
}

model DailyStats {
  id           String   @id @default(cuid())
  date         DateTime @unique @default(now())
  totalVisits  Int      @default(0)
  uniqueVisits Int      @default(0)
  pageViews    String   @default("{}")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("daily_stats")
}

model Product {
  id         String   @id @default(uuid())
  name       String
  brand      String
  image_url  String?
  quantity   Int?
  rate       Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
 cartItems  Cart[]
  @@map("products")
}

model Cart {
  id         String   @id @default(uuid())
  userId     String
  productId  String
  quantity   Int      @default(1)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("cart")
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  orderNumber     String      @unique
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  currency        String      @default("INR")
  
  paymentMethod   String?
  razorpayOrderId String?     @unique
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  payments        Payment[]
  
  @@map("orders")
}

model Payment {
  id                String        @id @default(cuid())
  orderId           String
  userId            String
  paymentMethod     PaymentMethod?
  amount            Float
  status            PaymentStatus @default(PENDING)
  providerPaymentId String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  order             Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}



